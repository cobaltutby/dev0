"use strict";
var WebpackBaseHref = (function () {
    /**
     * Creates an instance of WebpackBaseHref.
     *
     * @param {*} options Plugin options
     *
     * @memberOf WebpackBaseHref
     */
    function WebpackBaseHref(options) {
        this.options = options;
    }
    /**
     * Apply plugin
     *
     * @param {*} compiler Active compiler
     * @returns
     *
     * @memberOf WebpackBaseHref
     */
    WebpackBaseHref.prototype.apply = function (compiler) {
        var _this = this;
        // If not options, exit
        if (!this.options.baseHref) {
            return;
        }
        // Run plugin
        compiler.plugin('compilation', function (compilation) {
            // Run before HTML processing
            compilation.plugin('html-webpack-plugin-before-html-processing', function (htmlPluginData, callback) {
                // Check if base tag already exists
                var baseTagRegex = /<base.*?>/i;
                var replaceRegex = /href=\"*\S+\"*/i;
                var baseTagMatches = htmlPluginData.html.match(baseTagRegex);
                var finalValue = 'href="' + _this.options.baseHref + '"';
                // If element is already present on source HTML
                if (!!baseTagMatches) {
                    // Replace only href attribute
                    var modifiedBaseTag = baseTagMatches[0].replace(replaceRegex, finalValue);
                    htmlPluginData.html = htmlPluginData.html.replace(baseTagRegex, modifiedBaseTag);
                }
                else {
                    // Otherwise insert it in top of the head
                    htmlPluginData.html = htmlPluginData.html.replace(/<head>/i, '$&' + ("<base href=\"" + _this.options.baseHref + "\">"));
                }
                // Callback for complete plugin operation
                callback(null, htmlPluginData);
            });
        });
    };
    return WebpackBaseHref;
}());
exports.WebpackBaseHref = WebpackBaseHref;
